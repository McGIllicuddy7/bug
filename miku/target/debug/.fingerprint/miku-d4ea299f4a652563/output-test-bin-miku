{"$message_type":"diagnostic","message":"unterminated block comment","code":{"code":"E0758","explanation":"A multi-line (doc-)comment is unterminated.\n\nErroneous code example:\n\n```compile_fail,E0758\n/* I am not terminated!\n```\n\nThe same goes for doc comments:\n\n```compile_fail,E0758\n/*! I am not terminated!\n```\n\nYou need to end your multi-line comment with `*/` in order to fix this error:\n\n```\n/* I am terminated! */\n/*! I am also terminated! */\n```\n"},"level":"error","spans":[{"file_name":"src/miku.rs","byte_start":20035,"byte_end":21786,"line_start":600,"line_end":656,"column_start":17,"column_end":3,"is_primary":true,"text":[{"text":"                /*","highlight_start":17,"highlight_end":19},{"text":"                MikuInstr::Call {","highlight_start":1,"highlight_end":34},{"text":"                    to,","highlight_start":1,"highlight_end":24},{"text":"                    to_index,","highlight_start":1,"highlight_end":30},{"text":"                    args: _,","highlight_start":1,"highlight_end":29},{"text":"                    return_var: _,","highlight_start":1,"highlight_end":35},{"text":"                } => {","highlight_start":1,"highlight_end":23},{"text":"                    let mut indx = None;","highlight_start":1,"highlight_end":41},{"text":"                    for i in &self.functions {","highlight_start":1,"highlight_end":47},{"text":"                        if i.name.as_ref() == to.as_ref() {","highlight_start":1,"highlight_end":60},{"text":"                            indx = i.index;","highlight_start":1,"highlight_end":44},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if let Some(idx) = indx {","highlight_start":1,"highlight_end":46},{"text":"                        *to_index = Some(idx);","highlight_start":1,"highlight_end":47},{"text":"                    } else {","highlight_start":1,"highlight_end":29},{"text":"                        return Err(format!(\"could not find function {:#?}\", to));","highlight_start":1,"highlight_end":82},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                _ => {}","highlight_start":1,"highlight_end":24},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"    pub fn parse_to_program(str: &'a str) -> Result<Program, String> {","highlight_start":1,"highlight_end":71},{"text":"        let lines: Vec<&str> = str.lines().collect();","highlight_start":1,"highlight_end":54},{"text":"        let mut out = Self::new();","highlight_start":1,"highlight_end":35},{"text":"        let mut line_count = 1;","highlight_start":1,"highlight_end":32},{"text":"        for i in lines {","highlight_start":1,"highlight_end":25},{"text":"            let p = split_line(i);","highlight_start":1,"highlight_end":35},{"text":"            let t = out.parse_instruction(p);","highlight_start":1,"highlight_end":46},{"text":"            if let Err(e) = t {","highlight_start":1,"highlight_end":32},{"text":"                let e = Err(format!(\"Error line:{}, {}\", line_count, e));","highlight_start":1,"highlight_end":74},{"text":"                return e;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            line_count += 1;","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        out.fix_ups()?;","highlight_start":1,"highlight_end":24},{"text":"        Ok(out)","highlight_start":1,"highlight_end":16},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"","highlight_start":1,"highlight_end":1},{"text":"pub fn split_line(v: &str) -> Vec<&str> {","highlight_start":1,"highlight_end":42},{"text":"    v.split_whitespace().collect()","highlight_start":1,"highlight_end":35},{"text":"}","highlight_start":1,"highlight_end":2},{"text":"pub struct MikuObject<'a> {","highlight_start":1,"highlight_end":28},{"text":"    pub instructions: Vec<MikuInstr>,","highlight_start":1,"highlight_end":38},{"text":"    pub labels: HashMap<String, usize>,","highlight_start":1,"highlight_end":40},{"text":"    pub functions: Vec<FuncDec<'a>>,","highlight_start":1,"highlight_end":37},{"text":"    pub extern_functions: Vec<FuncDec<'a>>,","highlight_start":1,"highlight_end":44},{"text":"    pub global_vars: HashMap<String, VarDec<'a>>,","highlight_start":1,"highlight_end":50},{"text":"    pub extern_vars: HashMap<String, MikuType>,","highlight_start":1,"highlight_end":48},{"text":"    pub types: HashMap<String, MikuType>,","highlight_start":1,"highlight_end":42},{"text":"    pub current_function: Option<Arc<str>>,","highlight_start":1,"highlight_end":44},{"text":"}","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0758]\u001b[0m\u001b[0m\u001b[1m: unterminated block comment\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/miku.rs:600:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                /*\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                MikuInstr::Call {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    to,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    to_index,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub current_function: Option<Arc<str>>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m656\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 1 previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 1 previous error\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0758`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0758`.\u001b[0m\n"}
